main.py - Точка входа в приложение
    Инициализация QApplication
    Установка стиля "Fusion"
    Создание и отображение главного окна

utils.py - Вспомогательные утилиты
    Настройка логирования
    Обработчик ошибок (ErrorHandler)
    Конфигурация окружения (для Wine)
    Загрузка конфигурации аддонов с GitHub
    Функция запуска игры

addon_data.py - Модель данных аддона
    Класс AddonData: хранит информацию об аддоне (имя, ссылка, описание, путь установки, состояние)

install_thread.py - Потоки для установки/удаления
    Класс InstallThread: наследуется от QThread, выполняет установку/удаление в фоновом режиме
    Особенная логика для аддона NSQC (проверка версий, специальная установка)
    Поддержка как ZIP-архивов, так и отдельных файлов

addon_manager.py - Менеджер аддонов
    Класс AddonManager: центральный компонент для управления аддонами
    Загрузка конфигурации
    Проверка установленных аддонов
    Проверка обновлений (особенно для NSQC)
    Координация работы потоков установки

main_window.py - Главное окно приложения
    Класс AddonUpdater: наследуется от QMainWindow
    Построение интерфейса (кнопки, списки, прогресс-бары)
    Интеграция с AddonManager
    Переключение между панелью аддонов и голосового чата

voice_client_ui.py - Интерфейс голосового чата
    Класс VoiceChatUI: наследуется от QWidget
    Два стиля интерфейса (Telegram и Discord)
    Управление подключением, микрофоном, настройками
    Текстовый чат

voice_client_backend.py - Бэкенд голосового чата
    Класс VoiceClientBackend: реализация голосовой связи
    Работа с Opus-кодеком
    Сетевое взаимодействие по UDP
    Обработка аудио через PyAudio

voice_client_utils.py - Утилиты голосового чата
    Настройка логирования для голосового модуля

voice_client_constants.py - Константы голосового чата
    Параметры аудио (частота дискретизации, размер фрейма и т.д.)
    Адрес сервера
    Настройки Opus
